using backend.Models;
using backend.DTO;
using backend.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using Microsoft.Extensions.Options;
using System.Security.Cryptography;
using System.Text;

namespace backend.Controllers;

[ApiController]
[Route("[controller]")]
public class AccountController : ControllerBase
{
    private readonly AccountService _accountService;
    private readonly JwtSettings jwtSettings;
    public AccountController(AccountService accountService, IOptions<JwtSettings> options)
    {
        _accountService = accountService;
        jwtSettings = options.Value;
    }

    /// <summary>
    /// The function "CreatePasswordHash" takes a password as input and generates a hash and salt for the
    /// password using HMACSHA512 algorithm.
    /// </summary>
    /// <param name="password">The password is the string value that needs to be hashed and salted.</param>
    /// <param name="passwordHash">The passwordHash parameter is an output parameter that will store the
    /// computed hash value of the password.</param>
    /// <param name="passwordSalt">The passwordSalt is a randomly generated byte array that is used as a
    /// unique value to add additional security to the password hashing process. It is combined with the
    /// password before hashing to create a unique hash for each user's password.</param>
    private static void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
    {
        using var hmac = new HMACSHA512();
        passwordSalt = hmac.Key;
        passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));

    }
    /// <summary>
    /// The function verifies if a given password matches the stored password hash and salt.
    /// </summary>
    /// <param name="password">The `password` parameter is the plain text password that needs to be
    /// verified.</param>
    /// <param name="passwordHash">The password hash is a byte array that represents the hashed version of
    /// the user's password. It is typically generated using a cryptographic hash function like SHA-512. The
    /// password hash is stored in the database for later comparison during the authentication
    /// process.</param>
    /// <param name="passwordSalt">The passwordSalt is a randomly generated byte array that is used as a
    /// salt when hashing the password. The salt is used to add an extra layer of security by making it more
    /// difficult for attackers to crack the password using precomputed rainbow tables or dictionary
    /// attacks.</param>
    /// <returns>
    /// The method is returning a boolean value.
    /// </returns>
    private static bool VerifyPasswordHash(string password, byte[] passwordHash, byte[] passwordSalt)
    {
        using var hmac = new HMACSHA512(passwordSalt);
        var computedHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
        return computedHash.SequenceEqual(passwordHash);
    }
    /// <summary>
    /// The function creates a JWT token with specified claims and expiration time.
    /// </summary>
    /// <param name="Account">The `Account` parameter represents an account object that contains information
    /// about a user's account. It likely includes properties such as `NIC` (National Identification Card),
    /// `UserRole`, and `Id`.</param>
    /// <returns>
    /// The method is returning a JWT (JSON Web Token) as a string.
    /// </returns>
    private string CreateToken(Account account)
    {
        /* The above code is creating a new instance of the JwtSecurityTokenHandler class and
        initializing a tokenKey variable with the UTF8-encoded bytes of the jwtSettings.SecurityKey. */
        var tokenHandler = new JwtSecurityTokenHandler();
        var tokenKey = Encoding.UTF8.GetBytes(this.jwtSettings.SecurityKey);
        var tokenDesc = new SecurityTokenDescriptor
        {
            /* The above code is creating a new ClaimsIdentity object with three claims: "NIC" with the
            value of account.NIC, "Role" with the value of account.UserRole, and "account_id" with
            the value of account.Id. It also sets the expiration time for the identity to 30 minutes
            from the current time. Finally, it sets the signing credentials for the identity using a
            symmetric security key and the HmacSha512Signature algorithm. */
            Subject = new ClaimsIdentity(new Claim[] { new("NIC", account.NIC!), new(ClaimTypes.Role, account.UserRole!), new("account_id", account.Id!) }),
            Expires = DateTime.Now.AddMinutes(30),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(tokenKey), SecurityAlgorithms.HmacSha512Signature)
        };
        var token = tokenHandler.CreateToken(tokenDesc);
        string jwt = tokenHandler.WriteToken(token);
        return jwt;
    }


    /// <summary>
    /// This function retrieves a list of accounts and converts them into a list of AccountGetDTO objects.
    /// </summary>
    /// <returns>
    /// The method is returning a `Task<ActionResult<List<AccountGetDTO>>>`.
    /// </returns>
    [HttpGet]
    public async Task<ActionResult<List<AccountGetDTO>>> Get()
    {
        /* The above code is checking if the "UserDetails" object exists in the HttpContext.Items dictionary.
        If it exists and is of type "Account", it then checks if the UserRole property of the Account object
        is not equal to "Back_Office". If the condition is true, it returns an Unauthorized response. */
        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.UserRole != "Back_Office")
        {
            return Unauthorized();
        }
        /* The above code is declaring a variable "accounts" and assigning it the result of calling the
        "GetAccountAsync" method from the "_accountService" object. The "await" keyword indicates that the
        method call is asynchronous and the code will wait for the result before continuing. */
        var accounts = await _accountService.GetAccountAsync();

        /* The above code is creating a list of AccountGetDTO objects by selecting specific properties from a
        list of accounts. Each AccountGetDTO object will have properties such as Id, Name, NIC, Address,
        Number, Email, DOB, Gender, IsActive, UserRole, and CreatedTime, which are assigned values from the
        corresponding properties of the account objects. */
        var AccountGetDTOs = accounts.Select(account => new AccountGetDTO
        {
            Id = account.Id,
            Name = account.Name,
            NIC = account.NIC,
            Address = account.Address,
            Number = account.Number,
            Email = account.Email,
            DOB = account.DOB,
            Gender = account.Gender,
            IsActive = account.IsActive,
            UserRole = account.UserRole,
            CreatedTime = account.CreatedTime
        }).ToList();

        return AccountGetDTOs;
    }


    /// <summary>
    /// The above function is a GET endpoint that retrieves a list of traveler accounts, but only if the
    /// user is not a back office user.
    /// </summary>
    /// <returns>
    /// The method is returning an `ActionResult<List<AccountGetDTO>>`.
    /// </returns>
    [HttpGet("travelers")]
    public async Task<ActionResult<List<AccountGetDTO>>> GetTravelers()
    {

        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.UserRole != "Back_Office")
        {
            return Unauthorized();
        }

        /* The above code is retrieving traveler accounts using the `_accountService.GetTravelerAccountAsync()`
        method. It then maps the retrieved accounts to a list of `AccountGetDTO` objects using the `Select`
        method and initializes the properties of each `AccountGetDTO` object with the corresponding
        properties from the retrieved accounts. Finally, it converts the mapped objects to a list using the
        `ToList()` method. */
        var accounts = await _accountService.GetTravelerAccountAsync();

        var AccountGetDTOs = accounts.Select(account => new AccountGetDTO
        {
            Id = account.Id,
            Name = account.Name,
            NIC = account.NIC,
            Address = account.Address,
            Number = account.Number,
            Email = account.Email,
            DOB = account.DOB,
            Gender = account.Gender,
            IsActive = account.IsActive,
            UserRole = account.UserRole,
            CreatedTime = account.CreatedTime
        }).ToList();

        return AccountGetDTOs;
    }

    /// <summary>
    /// This function retrieves a list of user accounts and returns them as a list of AccountGetDTO objects.
    /// </summary>
    /// <returns>
    /// The method is returning a `Task<ActionResult<List<AccountGetDTO>>>`.
    /// </returns>
    [HttpGet("users")]
    public async Task<ActionResult<List<AccountGetDTO>>> GetUsers()
    {

        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.UserRole != "Back_Office")
        {
            return Unauthorized();
        }

        /* The above code is retrieving a list of user accounts asynchronously using the
        `_accountService.GetUsersAccountAsync()` method. It then maps the properties of each account to a
        new `AccountGetDTO` object using the `Select` method and initializes a list of `AccountGetDTO`
        objects. */
        var accounts = await _accountService.GetUsersAccountAsync();

        var AccountGetDTOs = accounts.Select(account => new AccountGetDTO
        {
            Id = account.Id,
            Name = account.Name,
            NIC = account.NIC,
            Address = account.Address,
            Number = account.Number,
            Email = account.Email,
            DOB = account.DOB,
            Gender = account.Gender,
            IsActive = account.IsActive,
            UserRole = account.UserRole,
            CreatedTime = account.CreatedTime
        }).ToList();

        return AccountGetDTOs;
    }

    /// <summary>
    /// This function retrieves an account based on the provided ID and returns its details in a specific
    /// format.
    /// </summary>
    /// <param name="id">The "id" parameter is a string that represents the unique identifier of the
    /// account that needs to be retrieved. The length of the "id" parameter is validated to ensure that it
    /// is 24 characters long.</param>
    /// <returns>
    /// The code is returning an ActionResult of type AccountGetDTO.
    /// </returns>
    [HttpGet("{id:length(24)}")]
    public async Task<ActionResult<AccountGetDTO>> Get(string id)
    {
        /* The above code is checking if the "UserDetails" object exists in the HttpContext.Items dictionary.
        If it exists and is of type "Account", it then checks if the UserRole property of the Account object
        is not equal to "Back_Office". If the condition is true, it returns an Unauthorized response. */
        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.UserRole != "Back_Office")
        {
            return Unauthorized();
        }

        /* The above code is using C# to retrieve an account asynchronously using the
        `_accountService.GetAccountAsync(id)` method. It then checks if the account is null, and if
        so, it returns a "Not Found" response. */
        var account = await _accountService.GetAccountAsync(id);
        if (account is null)
        {
            return NotFound();
        }
        /* The above code is creating a new instance of the AccountGetDTO class and populating its properties
        with values from an existing account object. */
        var AccountGetDTO = new AccountGetDTO
        {
            Id = account.Id,
            Name = account.Name,
            NIC = account.NIC,
            Address = account.Address,
            Number = account.Number,
            Email = account.Email,
            DOB = account.DOB,
            Gender = account.Gender,
            IsActive = account.IsActive,
            UserRole = account.UserRole,
            CreatedTime = account.CreatedTime
        };

        return AccountGetDTO;
    }


    /// <summary>
    /// This C# function retrieves an account asynchronously using an ID, checks if the account is null,
    /// and returns a "Not Found" response if it is, otherwise it creates a new instance of the
    /// AccountGetDTO class and populates its properties with values from the account object.
    /// </summary>
    /// <param name="id">The `id` parameter is a string that represents the unique identifier of the
    /// account. It is used to retrieve the account from the database. The length of the `id` parameter is
    /// validated using the `length(24)` constraint, which ensures that the length of the `id` parameter
    /// is exactly</param>
    /// <returns>
    /// The code is returning an instance of the `AccountGetDTO` class, which contains the properties of
    /// an account object.
    /// </returns>
    [HttpGet("profile/{id:length(24)}")]
    public async Task<ActionResult<AccountGetDTO>> GetMobile(string id)
    {
        /* The above code is using C# to retrieve an account asynchronously using the
        `_accountService.GetAccountAsync(id)` method. It then checks if the account is null, and if
        so, it returns a "Not Found" response. */
        var account = await _accountService.GetAccountAsync(id);
        if (account is null)
        {
            return NotFound();
        }
        /* The above code is creating a new instance of the AccountGetDTO class and populating its properties
        with values from an existing account object. */
        var AccountGetDTO = new AccountGetDTO
        {
            Id = account.Id,
            Name = account.Name,
            NIC = account.NIC,
            Address = account.Address,
            Number = account.Number,
            Email = account.Email,
            DOB = account.DOB,
            Gender = account.Gender,
            IsActive = account.IsActive,
            UserRole = account.UserRole,
            CreatedTime = account.CreatedTime
        };

        return AccountGetDTO;
    }

    /// <summary>
    /// The above function is a C# code snippet that handles the login functionality by verifying the
    /// user's credentials and creating a token for authentication.
    /// </summary>
    /// <param name="LoginDTO">The LoginDTO is a data transfer object that contains the following
    /// properties:</param>
    /// <returns>
    /// The code is returning an `ActionResult` with different responses based on the conditions:
    /// </returns>
    //GET Account => Login
    [HttpPost("login")]
    public async Task<ActionResult> Get([FromBody] LoginDTO loginDTO)
    {
        /* The above code is checking if an account exists based on a loginDTO.NIC value. If the
        account is not found, it returns a BadRequest response with the message "Account not found".
        If the account is found but is inactive, it returns a BadRequest response with the message
        "Account is deactivated". */
        var account = await _accountService.GetAccountLogin(loginDTO.NIC!);
        if (account is null)
        {
            return BadRequest("Account not found");
        }
        if (account.IsActive == false)
        {
            return BadRequest("Account is deactivated");
        }
        /* The above code is checking if the password provided in the loginDTO object matches the
        hashed password stored in the account object. It uses the VerifyPasswordHash method to
        compare the hashed password and the salt value. */
        if (VerifyPasswordHash(loginDTO.Password!, account.Password!, account.Salt!))
        {
            string token = CreateToken(account);
            string result = "{\"token\" : \"" + token + "\" ,\"role\": \""
                    + account.UserRole + "\",\"id\" :\"" + account.Id + "\"}";

            // Set a cookie with the token
            var cookieOptions = new CookieOptions
            {
                Expires = DateTime.Now.AddHours(12), // Cookie expires in 1 hour
                HttpOnly = true,   // Makes the cookie accessible only through HTTP requests, not JavaScript
                Secure = true,     // Sends the cookie only over HTTPS if available
                SameSite = SameSiteMode.None // Restricts cookie sharing between sites
            };

            // Set the cookie in the response with a name
            Response.Cookies.Append("Train", token, cookieOptions);

            return Ok(result);
        }
        return BadRequest("Invalid credentials");
    }
    /// <summary>
    /// The above function is an HTTP POST endpoint that creates a new account with the provided account
    /// information.
    /// </summary>
    /// <param name="AccountPostDTO">A data transfer object (DTO) that contains the properties for creating
    /// a new account. It includes the following properties:</param>
    /// <returns>
    /// The method is returning an `IActionResult` object.
    /// </returns>

    [HttpPost]
    public async Task<IActionResult> Post(AccountPostDTO accountPostDTO)
    {
        var accountCheck = await _accountService.GetAccountLogin(accountPostDTO.NIC!);
        if (accountCheck is not null)
        {
            return BadRequest("NIC already available");
        }
        Account account = new();
        /* The above code is calling a method called `CreatePasswordHash` and passing in the `Password`
        property of an `accountPostDTO` object. It also declares two `byte` arrays called `passwordHash` and
        `passwordSalt` which will be used to store the resulting password hash and salt values. The `out`
        keyword is used to indicate that these variables will be assigned values within the
        `CreatePasswordHash` method. */
        CreatePasswordHash(accountPostDTO.Password!, out byte[] passwordHash, out byte[] passwordSalt);
        account.Name = accountPostDTO.Name;
        account.Address = accountPostDTO.Address;
        account.NIC = accountPostDTO.NIC;
        account.Number = accountPostDTO.Number;
        account.Email = accountPostDTO.Email;
        account.Password = passwordHash;
        account.Salt = passwordSalt;
        account.DOB = accountPostDTO.DOB;
        account.Gender = accountPostDTO.Gender;
        account.IsActive = true;
        account.UserRole = accountPostDTO.UserRole;

        await _accountService.CreateAccountAsync(account);

        return CreatedAtAction(nameof(Get), new { id = account.Id }, account);
    }

    /// <summary>
    /// The above function updates an account with the provided ID using the data from the AccountPostDTO
    /// object.
    /// </summary>
    /// <param name="id">The id parameter is a string that represents the unique identifier of the account
    /// to be updated. It is used to retrieve the existing account from the database.</param>
    /// <param name="AccountPostDTO">AccountPostDTO is a data transfer object (DTO) that represents the
    /// data sent in the request body when updating an account. It contains the following
    /// properties:</param>
    /// <returns>
    /// The method is returning an IActionResult. In this case, it is returning a NoContent result,
    /// indicating that the update was successful and there is no content to return.
    /// </returns>
    [HttpPut("{id:length(24)}")]
    public async Task<IActionResult> Update(string id, AccountPostDTO accountPutDTO)
    {
        var account = await _accountService.GetAccountAsync(id);

        if (account is null)
        {
            return NotFound();
        }

        /* The above code is checking if the `Password` property of the `accountPutDTO` object is not null. If
        it is not null, it calls the `CreatePasswordHash` method to generate a password hash and salt based
        on the provided password. The generated password hash is then assigned to the `Password` property of
        the `account` object, and the generated salt is assigned to the `Salt` property of the `account`
        object. */
        if (accountPutDTO.Password is not null)
        {
            CreatePasswordHash(accountPutDTO.Password!, out byte[] passwordHash, out byte[] passwordSalt);
            account.Password = passwordHash;
            account.Salt = passwordSalt;
        }

        account.Name = accountPutDTO.Name ?? account.Name;
        account.Address = accountPutDTO.Address ?? account.Address;
        account.NIC = accountPutDTO.NIC ?? account.NIC;
        account.Number = accountPutDTO.Number ?? account.Number;
        account.Email = accountPutDTO.Email ?? account.Email;
        account.DOB = accountPutDTO.DOB ?? account.DOB;
        account.Gender = accountPutDTO.Gender ?? account.Gender;
        account.UserRole = accountPutDTO.UserRole ?? account.UserRole;

        await _accountService.UpdateAccountAsync(id, account);

        return NoContent();
    }

    /// <summary>
    /// This function handles the HTTP DELETE request to delete a user account by its ID.
    /// </summary>
    /// <param name="id">The "id" parameter is a string that represents the unique identifier of the account
    /// to be deleted. The length(24) constraint ensures that the id parameter must be exactly 24 characters
    /// long.</param>
    /// <returns>
    /// The method is returning an IActionResult. If the user is found, it returns an Ok result (HTTP 200).
    /// If the user is not found, it returns a NotFound result (HTTP 404).
    /// </returns>
    [HttpDelete("{id:length(24)}")]
    public async Task<IActionResult> Delete(string id)
    {
        var User = await _accountService.GetAccountAsync(id);

        if (User is null)
        {
            return NotFound();
        }

        await _accountService.RemoveAccountAsync(id);

        return Ok();
    }

    /// <summary>
    /// The function updates the status of a user account based on the provided account ID and account
    /// status DTO.
    /// </summary>
    /// <param name="id">The id parameter is a string that represents the account ID. It is expected to
    /// have a length of 24 characters.</param>
    /// <param name="AccountStatusDTO">AccountStatusDTO is a data transfer object (DTO) that contains
    /// information about the account status. It is used to pass the account status information from the
    /// client to the server in the HTTP request body. The properties of the AccountStatusDTO may
    /// include IsActive, which indicates whether the account is active or not</param>
    /// <returns>
    /// The method is returning an IActionResult. The possible return values are:
    /// - Unauthorized() if the user is not authorized to perform the action.
    /// - NotFound() if the account with the specified id is not found.
    /// - Ok() if the account is successfully updated.
    /// </returns>
    [HttpPut("Status/{id:length(24)}")]
    public async Task<IActionResult> UserStatus(string id, AccountStatusDTO accountStatusDTO)
    {
        // Retrieve the account ID from HttpContext.Items
        /* The above code is checking if the "UserDetails" object exists in the HttpContext.Items dictionary
        and if it does, it checks if it is of type "Account". If it is, it further checks if the UserRole
        property of the Account object is not equal to "Back_Office" and if the IsActive property of the
        accountStatusDTO object is not false. If any of these conditions are true, it returns an
        Unauthorized response. */
        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.UserRole != "Back_Office" && accountStatusDTO.IsActive != false)
        {
            return Unauthorized();
        }

        var account = await _accountService.GetAccountAsync(id);

        if (account is null)
        {
            return NotFound();
        }
        /* The above code is assigning the value of the IsActive property of an accountStatusDTO object to the
        IsActive property of an account object. */
        account.IsActive = accountStatusDTO.IsActive;

        await _accountService.UpdateAccountAsync(id, account);

        return Ok();
    }

    /// <summary>
    /// The above function retrieves the profile information of a user and returns it in the form of an
    /// AccountGetDTO object.
    /// </summary>
    /// <returns>
    /// The method is returning an ActionResult<AccountGetDTO>.
    /// </returns>
    [HttpGet("Profile")]
    public ActionResult<AccountGetDTO> GetProfile()
    {
        /* The above code is checking if the "UserDetails" key exists in the HttpContext.Items
        dictionary. If it does, it retrieves the value associated with that key and assigns it to the
        variable "accountObj". It then checks if "accountObj" is of type "Account LogUserAccount". */
        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount)
        {
            if (LogUserAccount is null)
            {
                return NotFound();
            }
            // Convert the Account objects to AccountDTO objects
            var AccountGetDTO = new AccountGetDTO
            {
                Id = LogUserAccount.Id,
                Name = LogUserAccount.Name,
                NIC = LogUserAccount.NIC,
                Address = LogUserAccount.Address,
                Number = LogUserAccount.Number,
                Email = LogUserAccount.Email,
                DOB = LogUserAccount.DOB,
                Gender = LogUserAccount.Gender,
                IsActive = LogUserAccount.IsActive,
                UserRole = LogUserAccount.UserRole,
                CreatedTime = LogUserAccount.CreatedTime
            };

            return AccountGetDTO;

        }
        return NotFound();
    }

    /// <summary>
    /// The above function is an HTTP DELETE endpoint that deletes a user profile based on the account ID
    /// retrieved from the HttpContext.
    /// </summary>
    /// <returns>
    /// If the account ID is successfully retrieved from HttpContext.Items and the account is successfully
    /// removed using the _accountService.RemoveAccountAsync method, then the method will return an Ok
    /// result (HTTP 200). If the account ID cannot be retrieved or the account cannot be removed, then
    /// the method will return a NotFound result (HTTP 404).
    /// </returns>
    [HttpDelete("Profile")]
    public async Task<IActionResult> DeleteProfile()
    {
        // Retrieve the account ID from HttpContext.Items
        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.Id != null)
        {
            await _accountService.RemoveAccountAsync(LogUserAccount.Id);

            return Ok();
        }
        return NotFound();
    }

    /// <summary>
    /// The function updates the profile information of an account based on the provided AccountPostDTO
    /// object.
    /// </summary>
    /// <param name="AccountPostDTO">AccountPostDTO is a data transfer object (DTO) that represents the
    /// data sent in the request body when updating an account profile. It contains the following
    /// properties:</param>
    /// <returns>
    /// The method is returning an IActionResult. The possible return values are:
    /// - NotFound() if the LogUserAccount is null
    /// - Ok() if the account is successfully updated
    /// - NoContent() if the account ID is not found in HttpContext.Items
    /// </returns>
    [HttpPut("Profile")]
    public async Task<IActionResult> UpdateProfile(AccountPostDTO accountPutDTO)
    {
        // Retrieve the account ID from HttpContext.Items
        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.Id != null)
        {
            if (LogUserAccount is null)
            {
                return NotFound();
            }

            if (accountPutDTO.Password is not null)
            {
                CreatePasswordHash(accountPutDTO.Password!, out byte[] passwordHash, out byte[] passwordSalt);
                LogUserAccount.Password = passwordHash;
                LogUserAccount.Salt = passwordSalt;
            }

            LogUserAccount.Name = accountPutDTO.Name ?? LogUserAccount.Name;
            LogUserAccount.Address = accountPutDTO.Address ?? LogUserAccount.Address;
            LogUserAccount.NIC = accountPutDTO.NIC ?? LogUserAccount.NIC;
            LogUserAccount.Number = accountPutDTO.Number ?? LogUserAccount.Number;
            LogUserAccount.Email = accountPutDTO.Email ?? LogUserAccount.Email;
            LogUserAccount.DOB = accountPutDTO.DOB ?? LogUserAccount.DOB;
            LogUserAccount.Gender = accountPutDTO.Gender ?? LogUserAccount.Gender;
            LogUserAccount.UserRole = accountPutDTO.UserRole ?? LogUserAccount.UserRole;

            await _accountService.UpdateAccountAsync(LogUserAccount.Id, LogUserAccount);

            return Ok();
        }
        return NoContent();
    }

    /// <summary>
    /// The function updates the profile information of an account based on the provided AccountPostDTO
    /// object.
    /// </summary>
    /// <param name="AccountPostDTO">AccountPostDTO is a data transfer object (DTO) that represents the
    /// data sent in the request body when updating an account profile. It contains the following
    /// properties:</param>
    /// <returns>
    /// The method is returning an IActionResult. The possible return values are:
    /// - NotFound() if the LogUserAccount is null
    /// - Ok() if the account is successfully updated
    /// - NoContent() if the account ID is not found in HttpContext.Items
    /// </returns>
    [HttpPut("Profile/{id:length(24)}")]
    public async Task<IActionResult> UpdateMobileProfile(string id, AccountPostDTO accountPutDTO)
    {
        var account = await _accountService.GetAccountAsync(id);

        if (account is null)
        {
            return NotFound();
        }

        if (accountPutDTO.Password is not null)
        {
            CreatePasswordHash(accountPutDTO.Password!, out byte[] passwordHash, out byte[] passwordSalt);
            account.Password = passwordHash;
            account.Salt = passwordSalt;
        }

        account.Name = accountPutDTO.Name ?? account.Name;
        account.Address = accountPutDTO.Address ?? account.Address;
        account.NIC = accountPutDTO.NIC ?? account.NIC;
        account.Number = accountPutDTO.Number ?? account.Number;
        account.Email = accountPutDTO.Email ?? account.Email;
        account.DOB = accountPutDTO.DOB ?? account.DOB;
        account.Gender = accountPutDTO.Gender ?? account.Gender;
        account.UserRole = accountPutDTO.UserRole ?? account.UserRole;

        await _accountService.UpdateAccountAsync(id, account);

        return Ok();

    }

    /// <summary>
    /// The function updates the status of a user's profile to inactive.
    /// </summary>
    /// <returns>
    /// The method is returning an IActionResult. The possible return values are:
    /// - NotFound() if the LogUserAccount is null
    /// - Ok() if the account is successfully updated
    /// - NoContent() if the HttpContext.Items does not contain the "UserDetails" key or if the account ID
    /// is null.
    /// </returns>
    [HttpPut("Profile/Status")]
    public async Task<IActionResult> UserStatusProfile()
    {
        // Retrieve the account ID from HttpContext.Items
        if (HttpContext.Items.TryGetValue("UserDetails", out var accountObj) && accountObj is Account LogUserAccount && LogUserAccount.Id != null)
        {
            if (LogUserAccount is null)
            {
                return NotFound();
            }
            LogUserAccount.IsActive = false;

            await _accountService.UpdateAccountAsync(LogUserAccount.Id, LogUserAccount);
            return Ok();
        }
        return NoContent();
    }

    /// <summary>
    /// This function updates the mobile status profile of a user by setting their IsActive property to
    /// false.
    /// </summary>
    /// <param name="id">The "id" parameter is a string that represents the unique identifier of the user's
    /// profile. It is expected to be a string of length 24.</param>
    /// <returns>
    /// The method is returning an Ok result.
    /// </returns>
    [HttpPut("Profile/Status/{id:length(24)}")]
    public async Task<IActionResult> UserMobileStatusProfile(string id)
    {

        var account = await _accountService.GetAccountAsync(id);

        account.IsActive = false;

        await _accountService.UpdateAccountAsync(id, account);
        return Ok();
    }
}